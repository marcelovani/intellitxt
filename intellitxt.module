<?php
/**
 * @file
 * Adds permissions, menu item and output JS for Intellitxt module.
 */

/**
 * Implementation of hook_init()
 */
function intellitxt_context_page_reaction() {
  $plugin = context_get_plugin('reaction', 'intellitxt');
  if ($plugin) {
    $plugin->execute();
  }
}

/**
 * Function to add the intellitxt tag onto the page
 * Called from the context reaction plugin
 */
function intellitxt_add_tag($ipid) {
  $enabled = variable_get('intellitxt_configured', FALSE);
  if ($enabled) {
    $domain = variable_get('intellitxt_domain', $default = '');
    drupal_add_js('http://' . check_plain($domain) . '/intellitxt/front.asp?ipid=' . check_plain($ipid) , array('group' => JS_THEME, 'weight' => 1000, 'type' => 'external'));
  }
}

/**
 * Implements hook_permission().
 */
function intellitxt_permission() {
  return array(
    'administer intellitxt settings' => array(
      'title' => t('Administer intellitxt settings'),
      'description' => t('Set up and configure intellitxt output'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function intellitxt_menu() {
  $items = array();

  $items['admin/config/system/intellitxt'] = array(
    'title' => 'Intellitxt Settings',
    'type' => MENU_NORMAL_ITEM,
    'description' => "Configure your site-wide intellitxt settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intellitxt_admin_settings_form'),
    'access arguments' => array('administer intellitxt settings'),
    'file' => 'intellitxt.admin.inc',
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements of hook_context_plugins()
 * Define intellitxt context plugins
 */
function intellitxt_context_plugins() {
  $plugins = array();
  $plugins['intellitxt_context_reaction_tag'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'intellitxt') . '/plugins',
      'file' => 'intellitxt_context_reaction_tag.inc',
      'class' => 'intellitxt_context_reaction_tag',
      'parent' => 'context_reaction',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry()
 * Register plugins with context as being conditions and/or reaction
 */
function intellitxt_context_registry() {
  return array(
    'reactions' => array(
      'intellitxt' => array(
        'title' => t('Intellitxt tag'),
        'description' => t('Add an intellitxt tag to the page with the selected ipid'),
        'plugin' => 'intellitxt_context_reaction_tag',
      ),
    ),
  );
}